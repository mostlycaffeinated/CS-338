#include <GL/glut.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <iostream>

GLfloat ex, ey, ez, theta,tx, ty,tz, radrho = 0.0f;

GLfloat pvertices[][3] = {//each vertex shared between shapes
	{0.0f,0.0f,0.0f},
	{0.0f,0.0f,4.0f},
	{0.0f,2.0f,0.0f},
	{0.0f,2.0f,4.0f},
	{2.0f,0.0f,0.0f},
	{2.0f,0.0f,4.0f}
};
GLfloat pcolors[][3] = {
	{0.2f,0.0f,0.0f}, //face 1
	{0.0f,0.0f,1.0f}, //face 2
	{0.0f,1.0f,0.0f}, //face 3
	{0.3f,0.4f,0.5f},  //face 4
	{1.0f,0.7f,0.3f} //face 5
};

// now define the polygon that USES those vertices 
//define any ONE face of the pyramid at a time
void pyramid_face(int a, int b, int c, int d){// 3 vertices define a face, bottom has 4 vertices
	glPushMatrix();
	if(d == -1){
		glBegin(GL_TRIANGLES);}
	else{
		glBegin(GL_QUADS);
	}
		glVertex3fv(pvertices[a]);
		glVertex3fv(pvertices[b]);
		glVertex3fv(pvertices[c]);
		if (d != -1)	glVertex3fv(pvertices[d]); // define quad face
	glEnd();
	glPopMatrix();
}
void draw_pyramid(){ // implement the faces of the figure
	glPushMatrix();
	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	glEnable(GL_DEPTH_TEST);
	glBegin(GL_POLYGON);
		glColor3fv(pcolors[0]);
		pyramid_face(2, 0, 4, -1);//rhs
		glColor3fv(pcolors[1]);
		pyramid_face(3, 1, 5, -1);//lhs
		glColor3fv(pcolors[2]);
		pyramid_face(0, 4, 5, 1);//bottom		
		glColor3fv(pcolors[3]);
		pyramid_face(3, 1, 0, 2);//back
		glColor3fv(pcolors[4]);
		pyramid_face(3, 5, 4, 2);//front
	glEnd();
	glDisable(GL_DEPTH_TEST);
	glPopMatrix();
}
void draw_square(){
	glPushMatrix();
	glPolygonMode(GL_FRONT, GL_FILL);
//	glEnable(GL_DEPTH_TEST);
	glClearColor(0.0, 0.0, 0.0, 0.0);
	glBegin(GL_QUADS);
		glColor3fv(pcolors[2]);
		pyramid_face(0, 1, 3, 2);//bottom
/*		glColor3fv(pcolors[3]);
		pyramid_face(0, 4, 5, 1);//lhs
		glColor3fv(pcolors[4]);
		pyramid_face(2, 4, 5, 3);//rhs */
	glEnd();
//	glDisable(GL_DEPTH_TEST);
	glPopMatrix();
}
void draw_triangle(){
	glPushMatrix();
	glPolygonMode(GL_FRONT, GL_FILL);
	glEnable(GL_DEPTH_TEST);
	glBegin(GL_TRIANGLES);
		glColor3fv(pcolors[0]);
		pyramid_face(2, 0, 4, -1);
	glEnd();
	glDisable(GL_DEPTH_TEST);
	glPopMatrix();
}
void draw_axes(){
	glPushMatrix();
	glBegin(GL_LINES); // as pairs of points (default action of GL_LINES)
		// draw line for x axis
		glColor3f(1.0, 0.0, 0.0);
		glVertex3f(0.0, 0.0, 0.0);
		glVertex3f(15.0, 0.0, 0.0);
		// draw line for y axis
		glColor3f(1.0, 1.0, 1.0);
		glVertex3f(0.0, 0.0, 0.0);
		glVertex3f(0.0, 15.0, 0.0);
		// draw line for Z axis
		glColor3f(0.0, 0.0, 1.0);
		glVertex3f(0.0, 0.0, 0.0);
		glVertex3f(0.0, 0.0, 15.0);
	glEnd();
	glPopMatrix();
}
void draw_a_line(){
	glPushMatrix();
	glBegin(GL_LINES);
		glColor3f(0.75, 0.0, 0.0); // RGB
		glVertex3f(0.0, 0.0, 0.0);   // point 1 (x,y,z coordinates) 
		glVertex3f(0.0, 0.0, 0.0); // point 2
	glEnd();
	glPopMatrix();
}
void func_reshaper(int w, int h){
	if(h == 0) h = 1;
	glViewport (0, 0, (GLsizei)w, (GLsizei)h);
	glMatrixMode (GL_PROJECTION);
	glLoadIdentity ();
	gluPerspective(60.0f, (GLsizei)w/(GLsizei)h, 0.1f, 100.0f);
	glMatrixMode (GL_MODELVIEW);
	glOrtho(0.0, w, 0.0, h, -10.0, 10.0);
}
void func_init(){
	ex = 5.0f;
	ey = 5.0f;
	ez = 5.0f;
	theta = 0.0f;
	tx = 0.0f;
	ty = 0.0f;
	tz = 0.0f;
	glEnable(GL_DEPTH_TEST);
	glDepthFunc(GL_LEQUAL);
	glShadeModel(GL_SMOOTH);
	glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST);
}
void func_display(){ //callback for glutDisplayFunc
	/* this is the function that draws the graphic object in the pre-created window */
	glClearDepth(1);
	glClearColor(0,0,0,1);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);	// clear window 
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	//              eye              at                  up
	gluLookAt(ex, ey, ez, 0.0, 0.0, 0.0, 0.0f, 1.0f, 0.0f);

	draw_axes();
	draw_square();
	draw_triangle();
	draw_pyramid();// now draw the pyramid	
	glutSwapBuffers();
	glFlush();
	glutPostRedisplay();
}
void mykey(unsigned char c, int i, int j){
	GLfloat x[4] ={pvertices[2][0],pvertices[3][0],pvertices[4][0],pvertices[5][0]};
	GLfloat y[4] ={pvertices[2][1],pvertices[3][1],pvertices[4][1],pvertices[5][1]};

	GLfloat radtheta = 0.2f;
	switch (c){
		case '+':
			//change x
			pvertices[2][0] = x[0]*cosf(radtheta) - y[0]*sinf(radtheta);
			pvertices[3][0] = x[1]*cosf(radtheta) - y[1]*sinf(radtheta);
			pvertices[4][0] = x[2]*cosf(radtheta) - y[2]*sinf(radtheta);
			pvertices[5][0] = x[3]*cosf(radtheta) - y[3]*sinf(radtheta);
			//change y
			pvertices[2][1] = y[0]*cosf(radtheta) + x[0]*sinf(radtheta);
			pvertices[3][1] = y[1]*cosf(radtheta) + x[1]*sinf(radtheta);
			pvertices[4][1] = y[2]*cosf(radtheta) + x[2]*sinf(radtheta);
			pvertices[5][1] = y[3]*cosf(radtheta) + x[3]*sinf(radtheta);	
			break;
		case '-': 
			radtheta *= -1.0f;
			//change x
			pvertices[2][0] = x[0]*cosf(radtheta) - y[0]*sinf(radtheta);
			pvertices[3][0] = x[1]*cosf(radtheta) - y[1]*sinf(radtheta);
			pvertices[4][0] = x[2]*cosf(radtheta) - y[2]*sinf(radtheta);
			pvertices[5][0] = x[3]*cosf(radtheta) - y[3]*sinf(radtheta);
			//change y
			pvertices[2][1] = y[0]*cosf(radtheta) + x[0]*sinf(radtheta);
			pvertices[3][1] = y[1]*cosf(radtheta) + x[1]*sinf(radtheta);
			pvertices[4][1] = y[2]*cosf(radtheta) + x[2]*sinf(radtheta);
			pvertices[5][1] = y[3]*cosf(radtheta) + x[3]*sinf(radtheta);
			break;
		default:
	         break;
	}
	glutPostRedisplay();
}
void specialkeys(int key, int a, int b){
	glMatrixMode(GL_PROJECTION);
	glPushMatrix();
	float x = ex, y = ey, z = ez;
	GLfloat dist = sqrtf(ex*ex + ey*ey + ez*ez);

	if(key == GLUT_KEY_UP){
		//rotate around origin through y axis
		radrho += 0.1f;
		GLfloat radpolar = acosf(z/dist);
		ex =  dist*cosf(radrho)*cosf(radpolar);
		ey = dist*sinf(radrho);
		ez =   dist*cosf(radrho)*sinf(radpolar);	
	}else if(key == GLUT_KEY_DOWN){
		//rotate around origin through y axis
		radrho -= 0.1f;
		GLfloat radpolar = acosf(z/dist);
		ex =  dist*cosf(radrho)*cosf(radpolar);
		ey = dist*sinf(radrho);
		ez =   dist*cosf(radrho)*sinf(radpolar);
	}else if(key == GLUT_KEY_LEFT){
		GLfloat radtheta = 0.1f;
		ex = x*cosf(radtheta) - z*sinf(radtheta);
		ez = z*cosf(radtheta) + x*sinf(radtheta);
	}else if(key == GLUT_KEY_RIGHT){
		GLfloat radtheta = -0.1f;
		ex = x*cosf(radtheta) - z*sinf(radtheta);
		ez = z*cosf(radtheta) + x*sinf(radtheta);
	}
	glFlush();
	glPopMatrix();
}
void pg_init(){ // define the palette & background
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glClearColor(0.0, 0.0, 0.0, 0.0);	// set clear color to black
	// now specify that parameters will be RGB values & opacity
	glColor4f(0.0f, 0.4f, 0.5f, 0.5f);
}
int main(int argc, char*argv[]){
	glutInit(&argc, argv);
	glutInitWindowSize(800, 600);
	glutInitWindowPosition(200, 30);
	glutCreateWindow("Pyramid Manipulation"); // define name on window
	
	/* register the call-back functions with Glut*/
	func_init();
	glutKeyboardFunc(mykey);
	glutSpecialFunc(specialkeys);
	glutDisplayFunc(func_display);
	glutIdleFunc(func_display);
	glutReshapeFunc(func_reshaper);
	glutMainLoop();
	return 0;
}
